/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/08beaffb-76dd-4dee-ac37-f7d472cacacc 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperature temp;
  CloudVolume level;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
const float trigPin = 5;
const float echoPin = 18;
long duration; // variable for the duration of sound wave travel
float distance; // variable for the distance measurement
float height;
float volume;
float temperature;

#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 26
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors (&oneWire);

void setup() {
  // Defined in thingProperties.h
  initProperties();
  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
 Serial.begin(115200); // // Serial Communication is starting with 9600 of baudrate speed
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
  Serial.println("with Arduino UNO R3");
  sensors.begin();
  }
void loop() {
  ArduinoCloud.update();
 sensors.requestTemperatures();  //send command for readings
  temperature = sensors.getTempCByIndex(0);  //we put the valus into the variable defined on the setup
  Serial.print("Temperature: ");
  Serial.println(temperature);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(1500);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(1500);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the height on the Serial Monitor
  height = 25 - distance;
  Serial.print("Height: ");
  Serial.print(height);
  Serial.println(" cm");
  temp=temperature;
  level= height;
  
  delay(500);

}


const float trigPin = 5;
const float echoPin = 18;
long duration; // variable for the duration of sound wave travel
float distance; // variable for the distance measurement
float height;
float volume;
float temperature;
#include <OneWire.h>
#include <DallasTemperature.h>
#define ONE_WIRE_BUS 26
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors (&oneWire);

void setup() {
  Serial.begin(9600); // // Serial Communication is starting with 9600 of baudrate speed
  pinMode(trigPin, OUTPUT); // Sets the trigPin as an OUTPUT
  pinMode(echoPin, INPUT); // Sets the echoPin as an INPUT
  Serial.println("Ultrasonic Sensor HC-SR04 Test"); // print some text in Serial Monitor
  Serial.println("with Arduino UNO R3");
  sensors.begin();
}

void loop() {

  sensors.requestTemperatures();  //send command for readings
  temperature = sensors.getTempCByIndex(0);  //we put the valus into the variable defined on the setup
    Serial.print("Temperature: ");

  Serial.println(temperature);
  digitalWrite(trigPin, LOW);
  delayMicroseconds(1500);
  // Sets the trigPin HIGH (ACTIVE) for 10 microseconds
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(1500);
  digitalWrite(trigPin, LOW);
  // Reads the echoPin, returns the sound wave travel time in microseconds
  duration = pulseIn(echoPin, HIGH);
  // Calculating the distance
  distance = duration * 0.034 / 2; // Speed of sound wave divided by 2 (go and back)
  // Displays the distance on the Serial Monitor
  Serial.print("Distance: ");
  Serial.print(distance);
  Serial.println(" cm");
  height = 20 - distance;
  Serial.print("Height: ");
  Serial.print(height);
  volume = 6.25 * 3.14 * height;
  Serial.print("volume: ");
  Serial.print(volume);
  delay(2000);
}

void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}
